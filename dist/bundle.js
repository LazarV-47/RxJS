(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,i,o,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(a){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(c=0)),c;)try{if(n=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return c.label++,{value:u[1],done:!1};case 5:c.label++,r=u[1],u=[0];continue;case 7:u=c.ops.pop(),c.trys.pop();continue;default:if(!((i=(i=c.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){c=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){c.label=u[1];break}if(6===u[0]&&c.label<i[1]){c.label=i[1],i=u;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(u);break}i[2]&&c.ops.pop(),c.trys.pop();continue}u=e.call(t,c)}catch(t){u=[6,t],r=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),c=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)c.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return c}function o(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function c(t){return this instanceof c?(this.v=t,this):new c(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function a(t){return"function"==typeof t}function s(t){return a(null==t?void 0:t.then)}var l,d=((l=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function f(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,c,u;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=r(s),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}else s.remove(this);var p=this.initialTeardown;if(a(p))try{p()}catch(t){u=t instanceof d?t.errors:[t]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var m=r(h),b=m.next();!b.done;b=m.next()){var y=b.value;try{v(y)}catch(t){u=null!=u?u:[],t instanceof d?u=o(o([],i(u)),i(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{b&&!b.done&&(c=m.return)&&c.call(m)}finally{if(n)throw n.error}}}if(u)throw new d(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&f(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&f(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function h(t){return t instanceof p||t&&"closed"in t&&a(t.remove)&&a(t.add)&&a(t.unsubscribe)}function v(t){a(t)?t():t.unsubscribe()}p.EMPTY;var m={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var c=b.delegate;return(null==c?void 0:c.setTimeout)?c.setTimeout.apply(c,o([t,e],i(n))):setTimeout.apply(void 0,o([t,e],i(n)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function y(t){b.setTimeout((function(){var e=m.onUnhandledError;if(!e)throw t;e(t)}))}function g(){}var w=x("C",void 0,void 0);function x(t,e,n){return{kind:t,value:e,error:n}}var E=null,C=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,h(e)&&e.add(n)):n.destination=D,n}return e(n,t),n.create=function(t,e,n){return new T(t,e,n)},n.prototype.next=function(t){this.isStopped?_(function(t){return x("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?_(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?_(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),S=Function.prototype.bind;function k(t,e){return S.call(t,e)}var L=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){A(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){A(t)}else A(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){A(t)}},t}(),T=function(t){function n(e,n,r){var i,o,c=t.call(this)||this;return a(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:c&&m.useDeprecatedNextContext?((o=Object.create(e)).unsubscribe=function(){return c.unsubscribe()},i={next:e.next&&k(e.next,o),error:e.error&&k(e.error,o),complete:e.complete&&k(e.complete,o)}):i=e,c.destination=new L(i),c}return e(n,t),n}(C);function A(t){var e;m.useDeprecatedSynchronousErrorHandling?(e=t,m.useDeprecatedSynchronousErrorHandling&&E&&(E.errorThrown=!0,E.error=e)):y(t)}function _(t,e){var n=m.onStoppedNotification;n&&b.setTimeout((function(){return n(t,e)}))}var D={closed:!0,next:g,error:function(t){throw t},complete:g},B="function"==typeof Symbol&&Symbol.observable||"@@observable";function I(t){return t}var P=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof C||function(t){return t&&a(t.next)&&a(t.error)&&a(t.complete)}(r)&&h(r)?t:new T(t,e,n);return function(t){if(m.useDeprecatedSynchronousErrorHandling){var e=!E;if(e&&(E={errorThrown:!1,error:null}),t(),e){var n=E,r=n.errorThrown,i=n.error;if(E=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=N(e))((function(e,r){var i=new T({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[B]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?I:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=N(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function N(t){var e;return null!==(e=null!=t?t:m.Promise)&&void 0!==e?e:Promise}function O(t){return a(t[B])}function j(t){return Symbol.asyncIterator&&a(null==t?void 0:t[Symbol.asyncIterator])}function M(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var H="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function R(t){return a(null==t?void 0:t[H])}function z(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},u("next"),u("throw"),u("return",(function(t){return function(e){return Promise.resolve(e).then(t,l)}})),r[Symbol.asyncIterator]=function(){return this},r;function u(t,e){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||a(t,e)}))},e&&(r[t]=e(r[t])))}function a(t,e){try{(n=i[t](e)).value instanceof c?Promise.resolve(n.value.v).then(s,l):d(o[0][2],n)}catch(t){d(o[0][3],t)}var n}function s(t){a("next",t)}function l(t){a("throw",t)}function d(t,e){t(e),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var e,r,i;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,c(e.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,c(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,c(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function U(t){return a(null==t?void 0:t.getReader)}function q(t){if(t instanceof P)return t;if(null!=t){if(O(t))return o=t,new P((function(t){var e=o[B]();if(a(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(t))return i=t,new P((function(t){for(var e=0;e<i.length&&!t.closed;e++)t.next(i[e]);t.complete()}));if(s(t))return n=t,new P((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,y)}));if(j(t))return Y(t);if(R(t))return e=t,new P((function(t){var n,i;try{for(var o=r(e),c=o.next();!c.done;c=o.next()){var u=c.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{c&&!c.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}t.complete()}));if(U(t))return Y(z(t))}var e,n,i,o;throw M(t)}function Y(t){return new P((function(e){(function(t,e){var i,o,c,u,a,s,l,d;return a=this,s=void 0,d=function(){var a,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},i("next"),i("throw"),i("return"),e[Symbol.asyncIterator]=function(){return this},e);function i(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(a=o.value,e.next(a),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),c={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(u=i.return)?[4,u.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(c)throw c.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(d.next(t))}catch(t){e(t)}}function r(t){try{i(d.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((d=d.apply(a,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function F(t){return function(e){if(function(t){return a(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,e,n,r,i){return new G(t,e,n,r,i)}var G=function(t){function n(e,n,r,i,o,c){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=c,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(C);function X(t,e){return F((function(n,r){var i=null,o=0,c=!1,u=function(){return c&&!i&&r.complete()};n.subscribe($(r,(function(n){null==i||i.unsubscribe();var c=0,a=o++;q(t(n,a)).subscribe(i=$(r,(function(t){return r.next(e?e(n,t,a,c++):t)}),(function(){i=null,u()})))}),(function(){c=!0,u()})))}))}function J(t,e){return F((function(n,r){var i=0;n.subscribe($(r,(function(n){r.next(t.call(e,n,i++))})))}))}function K(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function Q(t,e){return void 0===e&&(e=0),F((function(n,r){n.subscribe($(r,(function(n){return K(r,t,(function(){return r.next(n)}),e)}),(function(){return K(r,t,(function(){return r.complete()}),e)}),(function(n){return K(r,t,(function(){return r.error(n)}),e)})))}))}function V(t,e){return void 0===e&&(e=0),F((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function W(t,e){if(!t)throw new Error("Iterable cannot be null");return new P((function(n){K(n,e,(function(){var r=t[Symbol.asyncIterator]();K(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Z(t,e){return e?function(t,e){if(null!=t){if(O(t))return function(t,e){return q(t).pipe(V(e),Q(e))}(t,e);if(u(t))return function(t,e){return new P((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(s(t))return function(t,e){return q(t).pipe(V(e),Q(e))}(t,e);if(j(t))return W(t,e);if(R(t))return function(t,e){return new P((function(n){var r;return K(n,e,(function(){r=t[H](),K(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return a(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(U(t))return function(t,e){return W(z(t),e)}(t,e)}throw M(t)}(t,e):q(t)}var tt=function(){function t(t){this.id=t.id||0,this.name=t.name||"",this.image=t.image||"",this.level=t.level||"",this.attribute=t.attribute||"",this.type=t.type||"",this.prevEvolutions=t.prevEvolutions||[],this.nextEvolutions=t.nextEvolutions||[]}return t.fetchByName=function(e){return void 0===e&&(e=""),Z(fetch("http://localhost:3000/digimons")).pipe(X((function(t){return t.json()})),J((function(n){return n.filter((function(t){return t.name.toLowerCase().includes(e.toLowerCase())})).map((function(e){return new t(e)}))})))},t.fetchById=function(e){return Z(fetch("http://localhost:3000/digimons/".concat(e))).pipe(X((function(t){return t.json()})),J((function(e){return new t(e)})))},t.fetchSingleByName=function(e){return Z(fetch("http://localhost:3000/digimons")).pipe(X((function(t){return t.json()})),J((function(n){var r=n.find((function(t){return t.name.toLowerCase()===e.toLowerCase()}));if(!r)throw new Error("Digimon not found");return new t(r)})))},t.prototype.getPreviousEvolutions=function(){return this.prevEvolutions},t.prototype.getNextEvolutions=function(){return this.nextEvolutions},t}();function et(t){return t&&a(t.schedule)}function nt(t){return t[t.length-1]}function rt(t){return et(nt(t))?t.pop():void 0}function it(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Z(t,rt(t))}var ot=function(){function t(t){var e=this;this.view=t,this.view.bindSearch().pipe(X((function(t){return tt.fetchByName(t)}))).subscribe((function(t){e.view.renderDigimons(t),e.bindDigimonSelectionAfterRender()})),this.view.bindResetClick().pipe(X((function(){return tt.fetchByName()}))).subscribe((function(t){e.view.renderDigimons(t),e.bindDigimonSelectionAfterRender()})),this.view.bindCheckboxes().pipe(X((function(t){return t.length?e.fetchByTypes(t):e.fetchAllDigimons()}))).subscribe((function(t){e.view.renderDigimons(t),e.bindDigimonSelectionAfterRender()})),this.view.bindDigimonClick().pipe(X((function(t){return t?tt.fetchById(t):it(null)}))).subscribe((function(t){t&&e.view.renderDigimonDetail(t)})),this.view.bindNavigationClick().pipe(X((function(t){return e.getCurrentDigimon(t).pipe(J((function(e){return{digimon:e,direction:t}})))})),X((function(t){var n=t.digimon,r=t.direction;return e.getEvolutionDigimon(n,r)}))).subscribe((function(t){t&&e.view.renderDigimonDetail(t)})),this.view.bindCompareClick().subscribe((function(){var t=e.view.getSelectedDigimons();if(t.length>=2&&t.length<=4){var n=t.map((function(t){return Number(t)}));e.view.showCompareModal(n)}else alert("Please select between 2 and 4 Digimon for comparison.")})),this.view.bindScrollToTopButtonEvents(),tt.fetchByName().subscribe((function(t){e.view.renderDigimons(t),e.bindDigimonSelectionAfterRender()}))}return t.prototype.fetchByTypes=function(t){return tt.fetchByName().pipe(J((function(e){return e.filter((function(e){return t.includes(e.type)}))})))},t.prototype.fetchAllDigimons=function(){return tt.fetchByName()},t.prototype.bindDigimonSelectionAfterRender=function(){this.selectedDigimon$=this.view.bindDigimonSelection()},t.prototype.getCurrentDigimon=function(t){if(!t)return it(null);var e=this.view.getDigimonList().querySelector(".digimon-detail");if(e){var n=parseInt(e.getAttribute("data-id")||"0");return tt.fetchById(n)}return it(null)},t.prototype.getEvolutionDigimon=function(t,e){if(!t)return it(null);var n="prev"===e?t.getPreviousEvolutions():t.getNextEvolutions();if(n.length>0){var r=n[0];return tt.fetchSingleByName(r)}return it(null)},t.prototype.handleComparison=function(){var t=this;this.selectedDigimon$.subscribe((function(e){e.length>=2&&e.length<=4?t.view.showCompareModal(e):alert("Please select between 2 and 4 Digimon for comparison.")}))},t}();function ct(t,e,n){return void 0===n&&(n=1/0),a(e)?ct((function(n,r){return J((function(t,i){return e(n,t,r,i)}))(q(t(n,r)))}),n):("number"==typeof e&&(n=e),F((function(e,r){return function(t,e,n,r,i,o,c,u){var a=[],s=0,l=0,d=!1,f=function(){!d||a.length||s||e.complete()},p=function(t){return s<r?h(t):a.push(t)},h=function(t){s++;var i=!1;q(n(t,l++)).subscribe($(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{s--;for(;a.length&&s<r;)t=void 0,t=a.shift(),h(t);f()}catch(t){e.error(t)}var t})))};return t.subscribe($(e,p,(function(){d=!0,f()}))),function(){}}(e,r,t,n)})))}var ut=Array.isArray;function at(t){return J((function(e){return function(t,e){return ut(e)?t.apply(void 0,o([],i(e))):t(e)}(t,e)}))}var st=["addListener","removeListener"],lt=["addEventListener","removeEventListener"],dt=["on","off"];function ft(t,e,n,r){if(a(n)&&(r=n,n=void 0),r)return ft(t,e,n).pipe(at(r));var o=i(function(t){return a(t.addEventListener)&&a(t.removeEventListener)}(t)?lt.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return a(t.addListener)&&a(t.removeListener)}(t)?st.map(pt(t,e)):function(t){return a(t.on)&&a(t.off)}(t)?dt.map(pt(t,e)):[],2),c=o[0],s=o[1];if(!c&&u(t))return ct((function(t){return ft(t,e,n)}))(q(t));if(!c)throw new TypeError("Invalid event target");return new P((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return c(e),function(){return s(e)}}))}function pt(t,e){return function(n){return function(r){return t[n](e,r)}}}var ht=new P((function(t){return t.complete()}));function vt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=rt(t),r=function(t,e){return"number"==typeof nt(t)?t.pop():1/0}(t),i=t;return i.length?1===i.length?q(i[0]):function(t){return void 0===t&&(t=1/0),ct(I,t)}(r)(Z(i,n)):ht}var mt=Array.isArray,bt=Object.getPrototypeOf,yt=Object.prototype,gt=Object.keys;function wt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=function(t){return a(nt(t))?t.pop():void 0}(t),r=function(t){if(1===t.length){var e=t[0];if(mt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&bt(r)===yt){var n=gt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),i=r.args,o=r.keys,c=new P((function(t){var e=i.length;if(e)for(var n=new Array(e),r=e,c=e,u=function(e){var u=!1;q(i[e]).subscribe($(t,(function(t){u||(u=!0,c--),n[e]=t}),(function(){return r--}),void 0,(function(){r&&u||(c||t.next(o?function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(o,n):n),t.complete())})))},a=0;a<e;a++)u(a);else t.complete()}));return n?c.pipe(at(n)):c}var xt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(p),Et={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var c=Et.delegate;return(null==c?void 0:c.setInterval)?c.setInterval.apply(c,o([t,e],i(n))):setInterval.apply(void 0,o([t,e],i(n)))},clearInterval:function(t){var e=Et.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},Ct=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),Et.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&Et.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(xt),St={now:function(){return(St.delegate||Date).now()},delegate:void 0},kt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=St.now,t}(),Lt=new(function(t){function n(e,n){void 0===n&&(n=kt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(kt))(Ct),Tt=Lt;function At(t,e,n){void 0===e&&(e=Lt);var r=function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Tt);var r=-1;return null!=e&&(et(e)?n=e:r=e),new P((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var c=0;return n.schedule((function(){e.closed||(e.next(c++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(t,e);return function(t,e){return F((function(t,n){var i=null!=e?e:{},o=i.leading,c=void 0===o||o,u=i.trailing,a=void 0!==u&&u,s=!1,l=null,d=null,f=!1,p=function(){null==d||d.unsubscribe(),d=null,a&&(m(),f&&n.complete())},h=function(){d=null,f&&n.complete()},v=function(t){return d=q(r).subscribe($(n,p,h))},m=function(){if(s){s=!1;var t=l;l=null,n.next(t),!f&&v()}};t.subscribe($(n,(function(t){s=!0,l=t,(!d||d.closed)&&(c?m():v())}),(function(){f=!0,(!(a&&s&&d)||d.closed)&&n.complete()})))}))}(0,n)}var _t=function(){function t(t){this.checkBoxes=[],this.digimonList=document.createElement("div"),this.digimonList.classList.add("digimon-list");var e=document.createElement("div");e.classList.add("search-container");var n=document.createElement("btn");n.classList.add("reset-btn"),this.resetBtn=n,e.appendChild(n),this.searchInput=document.createElement("input"),this.searchInput.type="text",this.searchInput.classList.add("digimon-search"),this.searchInput.name="digimon-search",this.searchInput.placeholder="Search Digimon",e.appendChild(this.searchInput),this.compareBtn=document.createElement("button"),this.compareBtn.classList.add("compare-btn"),this.compareBtn.innerHTML="Compare",e.appendChild(this.compareBtn),this.checkBoxContainer=document.createElement("div"),this.checkBoxContainer.classList.add("checkbox-container"),t.appendChild(e),t.appendChild(this.checkBoxContainer),t.appendChild(this.digimonList),this.addCheckBoxes(),this.scrollToTopBtn=document.createElement("button"),this.scrollToTopBtn.classList.add("scrollTop-btn"),this.scrollToTopBtn.innerText="^",t.appendChild(this.scrollToTopBtn),this.scrollToTopBtn.style.display="none"}return t.prototype.bindSearch=function(){var t=this;return ft(this.searchInput,"input").pipe(J((function(e){var n;return t.uncheckAllCheckboxes(),void 0===n&&(n=Lt),F((function(t,e){var r=null,i=null,o=null,c=function(){if(r){r.unsubscribe(),r=null;var t=i;i=null,e.next(t)}};function u(){var t=o+200,i=n.now();if(i<t)return r=this.schedule(void 0,t-i),void e.add(r);c()}t.subscribe($(e,(function(t){i=t,o=n.now(),r||(r=n.schedule(u,200),e.add(r))}),(function(){c(),e.complete()}),void 0,(function(){i=r=null})))})),e.target.value})))},t.prototype.bindDigimonClick=function(){return ft(this.digimonList,"click").pipe(J((function(t){var e=t.target.closest(".digimon-tile");return e?parseInt(e.getAttribute("data-id")||"0",10):0})))},t.prototype.bindResetClick=function(){var t=this;return ft(this.resetBtn,"click").pipe(J((function(){t.clearSearchBar(),t.uncheckAllCheckboxes()})))},t.prototype.bindNavigationClick=function(){return ft(document.body,"click").pipe(J((function(t){var e=t.target.closest(".navigation-arrow");return e?e.getAttribute("data-direction"):""})))},t.prototype.bindCheckboxes=function(){var t=this,e=this.checkBoxes.map((function(e){return ft(e,"change").pipe(J((function(){return t.clearSearchBar(),t.getSelectedTypes()})))}));return vt.apply(void 0,e)},t.prototype.bindDigimonSelection=function(){var t=this,e=document.querySelectorAll(".digimon-compare-checkbox");return e.forEach((function(e){ft(e,"change").subscribe((function(){t.getSelectedDigimons().length>4&&(alert("You can only select up to 4 Digimon for comparison."),e.checked=!1)}))})),ft(e,"change").pipe(J((function(){return t.getSelectedDigimons().map(Number)})))},t.prototype.bindCompareClick=function(){return ft(this.compareBtn,"click")},t.prototype.bindScrollToTopButtonEvents=function(){var t=this;this.scrollToTopBtn&&(ft(window,"scroll").pipe(At(200),J((function(){return window.scrollY>300}))).subscribe((function(e){t.scrollToTopBtn&&(t.scrollToTopBtn.style.display=e?"block":"none")})),ft(this.scrollToTopBtn,"click").subscribe((function(){window.scrollTo({top:0,behavior:"smooth"})})))},t.prototype.renderDigimons=function(t){var e=this;this.digimonList.innerHTML="",t.forEach((function(t){var n=function(t){var e=document.createElement("div");e.classList.add("digimon-tile"),e.setAttribute("data-id",t.id.toString());var n=document.createElement("img");n.src=t.image,n.alt=t.name,n.classList.add("digimonImg-tile"),e.appendChild(n);var r=document.createElement("p");r.classList.add("digimon-name-tile"),r.textContent=t.name,e.appendChild(r);var i=document.createElement("label");i.classList.add("digimon-compare-label");var o=document.createElement("input");o.type="checkbox",o.classList.add("digimon-compare-checkbox"),o.setAttribute("data-id",t.id.toString());var c=document.createElement("span");return c.textContent="Compare",c.classList.add("digimon-compare-text"),i.appendChild(o),i.appendChild(c),e.appendChild(i),i.addEventListener("click",(function(t){t.stopPropagation()})),e}(t);e.digimonList.appendChild(n)}))},t.prototype.renderDigimonDetail=function(t){this.digimonList.innerHTML="",this.uncheckAllCheckboxes(),this.clearSearchBar();var e=function(t){var e=document.createElement("div");e.classList.add("digimon-detail"),e.setAttribute("data-id",t.id.toString());var n=document.createElement("img");n.src=t.image,n.alt=t.name,n.classList.add("digimonImg-detail"),e.appendChild(n);var r=document.createElement("h1");r.classList.add("digimon-name-detail"),r.textContent=t.name,e.appendChild(r);var i=document.createElement("div");if(i.classList.add("attributes-container"),[{label:"Level",value:t.level},{label:"Attribute",value:t.attribute},{label:"Type",value:t.type}].forEach((function(t){!function(t,e,n){var r=document.createElement("div");r.classList.add("attribute");var i=document.createElement("p");i.classList.add("attribute-label"),i.textContent=e;var o=document.createElement("p");o.classList.add("attribute-value"),o.textContent=n,r.appendChild(i),r.appendChild(o),t.appendChild(r)}(i,t.label,t.value)})),e.appendChild(i),t.prevEvolutions.length>0){var o=document.createElement("button");o.classList.add("navigation-arrow","navigation-arrow-prev"),o.setAttribute("data-direction","prev"),o.textContent=t.prevEvolutions[0],e.appendChild(o)}if(t.nextEvolutions.length>0){var c=document.createElement("button");c.classList.add("navigation-arrow","navigation-arrow-next"),c.setAttribute("data-direction","next"),c.textContent=t.nextEvolutions[0],e.appendChild(c)}return e}(t);this.digimonList.appendChild(e)},t.prototype.showCompareModal=function(t){var e=this,n=document.createElement("div");n.classList.add("modal-overlay"),wt(t.map((function(t){return tt.fetchById(t)}))).subscribe((function(t){var r=document.createElement("div");r.classList.add("modal-container"),t.forEach((function(t){var e=function(t){var e=document.createElement("div");e.classList.add("digimon-card");var n=document.createElement("img");n.src=t.image,n.alt=t.name,n.classList.add("digimonImg-tile"),e.appendChild(n);var r=document.createElement("p");r.classList.add("digimon-name-tile"),r.innerHTML="<strong>Name:</strong> ".concat(t.name),e.appendChild(r);var i=document.createElement("p");i.classList.add("digimon-level-tile"),i.innerHTML="<strong>Level:</strong> ".concat(t.level),e.appendChild(i);var o=document.createElement("p");o.classList.add("digimon-attribute-tile"),o.innerHTML="<strong>Attribute:</strong> ".concat(t.attribute),e.appendChild(o);var c=document.createElement("p");return c.classList.add("digimon-type-tile"),c.innerHTML="<strong>Type:</strong> ".concat(t.type),e.appendChild(c),e}(t);r.appendChild(e)}));var i=document.createElement("button");i.classList.add("modal-close-button"),i.textContent="X",r.appendChild(i),n.appendChild(r),document.body.appendChild(n),n.style.display="block",ft(i,"click").subscribe((function(){return e.closeModal(n)})),ft(n,"click").subscribe((function(t){t.target===n&&e.closeModal(n)}))}))},t.prototype.closeModal=function(t){t.style.display="none",document.body.removeChild(t),document.querySelectorAll(".digimon-compare-checkbox").forEach((function(t){t.checked=!1}))},t.prototype.getDigimonList=function(){return this.digimonList},t.prototype.addCheckBoxes=function(){var t=this;["Slime","Lesser","Reptile","Dinosaur","Cyborg","Dragon Man","Bird","Beast","Fairy","Plant","Insect","Sea Animal","Mammal","Angel","Holy Beast","Holy Dragon","Seraph"].forEach((function(e){var n=document.createElement("label"),r=document.createElement("input");r.type="checkbox",r.value=e,r.name=e,n.appendChild(r),n.appendChild(document.createTextNode(e)),t.checkBoxContainer.appendChild(n),t.checkBoxes.push(r)}))},t.prototype.getSelectedTypes=function(){return this.checkBoxes.filter((function(t){return t.checked})).map((function(t){return t.value}))},t.prototype.clearSearchBar=function(){this.searchInput.value=""},t.prototype.uncheckAllCheckboxes=function(){this.checkBoxes.forEach((function(t){t.checked=!1}))},t.prototype.getSelectedDigimons=function(){var t=[];return document.querySelectorAll(".digimon-compare-checkbox").forEach((function(e){var n=e;if(n.checked){var r=n.getAttribute("data-id");r&&t.push(r)}})),t},t}();document.addEventListener("DOMContentLoaded",(function(){var t=new _t(document.body);new ot(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,